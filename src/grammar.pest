Input = _{ SOI ~ expr ~ EOI }
expr = _{ BinExpr | Invocation | LetBind | primary }
BinExpr = !{ bin_expr_primary ~ (binary_op ~ bin_expr_primary)+ }
	bin_expr_primary = _{ Invocation | primary }

atomic = _{ "(" ~ expr ~ ")" }
primary = _{ literal | atomic | CondExpr | Identifier | parameter }
Invocation = { primary{2,} }
parameter = _{ "$" ~ ParameterIndex }
ParameterIndex = ${ "0" | '1' .. '9' ~ ASCII_DIGIT* }

binary_op = _{ Add | Sub | Mul | Div | Mod | Eq | Ne | Gt | Lt | Ge | Le }
Add = { "+" }
Sub = { "-" }
Mul = { "*" }
Div = { "/" }
Mod = { "%" }
Eq = { "==" }
Ne = { "!=" }
Gt = { ">" }
Lt = { "<" }
Ge = { ">=" }
Le = { "<=" }

CondExpr = { if_phrase ~ elif_phrase* ~ else_phrase? ~ "end" }
	if_phrase = _{ "if" ~ expr ~ "then" ~ expr }
    elif_phrase = _{ "elif" ~ expr ~ "then" ~ expr }
    else_phrase = _{ "else" ~ expr }

Function = { "fn" ~ (Arguments ~ "->")? ~ expr ~ "end" }
	Arguments = { Identifier+ }
	
non_function_literal = _{ Integer | Float }

literal = _{ Function | non_function_literal }

Integer = @{ sign? ~ (integer_hex | integer_oct | integer_bin | integer_dec) }
	integer_dec = { ASCII_DIGIT ~ (ASCII_DIGIT | "_" )* }
    integer_hex = { "0x" ~ ASCII_HEX_DIGIT ~ (ASCII_HEX_DIGIT | "_")* }
    integer_oct = { "0o" ~ ASCII_OCT_DIGIT ~ (ASCII_OCT_DIGIT | "_")* }
    integer_bin = { "0b" ~ ASCII_BIN_DIGIT ~ (ASCII_BIN_DIGIT | "_")* }
    	sign = { "-" | "+" }

Float = @{ integer_dec ~ "." ~ integer_dec ~ exponent | integer_dec ~ "." ~ integer_dec? | integer_dec ~ exponent }
    exponent = { ("e" | "E") ~ sign? ~ "_"* ~ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }

keyword = { "if" | "elif" | "end" | "else" | "fn" | "then" | "let" | "in" }

Identifier = @{ !keyword ~ (ASCII_ALPHA ~ ASCII_ALPHANUMERIC*) }

LetBind = { "let" ~ Identifier ~ "=" ~ expr ~ "in" ~ expr }

ws = { WHITESPACE+ }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

